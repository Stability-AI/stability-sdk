// source: generation.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.gooseai.Action', null, global);
goog.exportSymbol('proto.gooseai.Answer', null, global);
goog.exportSymbol('proto.gooseai.AnswerMeta', null, global);
goog.exportSymbol('proto.gooseai.Artifact', null, global);
goog.exportSymbol('proto.gooseai.Artifact.DataCase', null, global);
goog.exportSymbol('proto.gooseai.ArtifactType', null, global);
goog.exportSymbol('proto.gooseai.AssetAction', null, global);
goog.exportSymbol('proto.gooseai.AssetParameters', null, global);
goog.exportSymbol('proto.gooseai.ChainRequest', null, global);
goog.exportSymbol('proto.gooseai.ClassifierCategory', null, global);
goog.exportSymbol('proto.gooseai.ClassifierConcept', null, global);
goog.exportSymbol('proto.gooseai.ClassifierMode', null, global);
goog.exportSymbol('proto.gooseai.ClassifierParameters', null, global);
goog.exportSymbol('proto.gooseai.ConditionerParameters', null, global);
goog.exportSymbol('proto.gooseai.DiffusionSampler', null, global);
goog.exportSymbol('proto.gooseai.FinishReason', null, global);
goog.exportSymbol('proto.gooseai.ImageParameters', null, global);
goog.exportSymbol('proto.gooseai.OnStatus', null, global);
goog.exportSymbol('proto.gooseai.Prompt', null, global);
goog.exportSymbol('proto.gooseai.Prompt.PromptCase', null, global);
goog.exportSymbol('proto.gooseai.PromptParameters', null, global);
goog.exportSymbol('proto.gooseai.Request', null, global);
goog.exportSymbol('proto.gooseai.Request.ParamsCase', null, global);
goog.exportSymbol('proto.gooseai.SamplerParameters', null, global);
goog.exportSymbol('proto.gooseai.ScheduleParameters', null, global);
goog.exportSymbol('proto.gooseai.Stage', null, global);
goog.exportSymbol('proto.gooseai.StageAction', null, global);
goog.exportSymbol('proto.gooseai.StepParameter', null, global);
goog.exportSymbol('proto.gooseai.Token', null, global);
goog.exportSymbol('proto.gooseai.Tokens', null, global);
goog.exportSymbol('proto.gooseai.TransformType', null, global);
goog.exportSymbol('proto.gooseai.TransformType.TypeCase', null, global);
goog.exportSymbol('proto.gooseai.Upscaler', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.Token = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.Token.displayName = 'proto.gooseai.Token';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.Tokens = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gooseai.Tokens.repeatedFields_, null);
};
goog.inherits(proto.gooseai.Tokens, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.Tokens.displayName = 'proto.gooseai.Tokens';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.Artifact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.gooseai.Artifact.oneofGroups_);
};
goog.inherits(proto.gooseai.Artifact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.Artifact.displayName = 'proto.gooseai.Artifact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.PromptParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.PromptParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.PromptParameters.displayName = 'proto.gooseai.PromptParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.Prompt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.gooseai.Prompt.oneofGroups_);
};
goog.inherits(proto.gooseai.Prompt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.Prompt.displayName = 'proto.gooseai.Prompt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.AnswerMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.AnswerMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.AnswerMeta.displayName = 'proto.gooseai.AnswerMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.Answer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gooseai.Answer.repeatedFields_, null);
};
goog.inherits(proto.gooseai.Answer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.Answer.displayName = 'proto.gooseai.Answer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.SamplerParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.SamplerParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.SamplerParameters.displayName = 'proto.gooseai.SamplerParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.ConditionerParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.ConditionerParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.ConditionerParameters.displayName = 'proto.gooseai.ConditionerParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.ScheduleParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.ScheduleParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.ScheduleParameters.displayName = 'proto.gooseai.ScheduleParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.StepParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.StepParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.StepParameter.displayName = 'proto.gooseai.StepParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.TransformType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.gooseai.TransformType.oneofGroups_);
};
goog.inherits(proto.gooseai.TransformType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.TransformType.displayName = 'proto.gooseai.TransformType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.ImageParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gooseai.ImageParameters.repeatedFields_, null);
};
goog.inherits(proto.gooseai.ImageParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.ImageParameters.displayName = 'proto.gooseai.ImageParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.ClassifierConcept = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.ClassifierConcept, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.ClassifierConcept.displayName = 'proto.gooseai.ClassifierConcept';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.ClassifierCategory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gooseai.ClassifierCategory.repeatedFields_, null);
};
goog.inherits(proto.gooseai.ClassifierCategory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.ClassifierCategory.displayName = 'proto.gooseai.ClassifierCategory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.ClassifierParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gooseai.ClassifierParameters.repeatedFields_, null);
};
goog.inherits(proto.gooseai.ClassifierParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.ClassifierParameters.displayName = 'proto.gooseai.ClassifierParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.AssetParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.AssetParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.AssetParameters.displayName = 'proto.gooseai.AssetParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gooseai.Request.repeatedFields_, proto.gooseai.Request.oneofGroups_);
};
goog.inherits(proto.gooseai.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.Request.displayName = 'proto.gooseai.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.OnStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gooseai.OnStatus.repeatedFields_, null);
};
goog.inherits(proto.gooseai.OnStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.OnStatus.displayName = 'proto.gooseai.OnStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.Stage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gooseai.Stage.repeatedFields_, null);
};
goog.inherits(proto.gooseai.Stage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.Stage.displayName = 'proto.gooseai.Stage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.ChainRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gooseai.ChainRequest.repeatedFields_, null);
};
goog.inherits(proto.gooseai.ChainRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.ChainRequest.displayName = 'proto.gooseai.ChainRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.Token.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.Token.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.Token} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Token.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.Token}
 */
proto.gooseai.Token.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.Token;
  return proto.gooseai.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.Token}
 */
proto.gooseai.Token.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.Token.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.Token.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Token.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.gooseai.Token.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.Token} returns this
 */
proto.gooseai.Token.prototype.setText = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.Token} returns this
 */
proto.gooseai.Token.prototype.clearText = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Token.prototype.hasText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 id = 2;
 * @return {number}
 */
proto.gooseai.Token.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.Token} returns this
 */
proto.gooseai.Token.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gooseai.Tokens.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.Tokens.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.Tokens.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.Tokens} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Tokens.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokensList: jspb.Message.toObjectList(msg.getTokensList(),
    proto.gooseai.Token.toObject, includeInstance),
    tokenizerId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.Tokens}
 */
proto.gooseai.Tokens.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.Tokens;
  return proto.gooseai.Tokens.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.Tokens} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.Tokens}
 */
proto.gooseai.Tokens.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gooseai.Token;
      reader.readMessage(value,proto.gooseai.Token.deserializeBinaryFromReader);
      msg.addTokens(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenizerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.Tokens.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.Tokens.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.Tokens} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Tokens.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.gooseai.Token.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Token tokens = 1;
 * @return {!Array<!proto.gooseai.Token>}
 */
proto.gooseai.Tokens.prototype.getTokensList = function() {
  return /** @type{!Array<!proto.gooseai.Token>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gooseai.Token, 1));
};


/**
 * @param {!Array<!proto.gooseai.Token>} value
 * @return {!proto.gooseai.Tokens} returns this
*/
proto.gooseai.Tokens.prototype.setTokensList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gooseai.Token=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gooseai.Token}
 */
proto.gooseai.Tokens.prototype.addTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gooseai.Token, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gooseai.Tokens} returns this
 */
proto.gooseai.Tokens.prototype.clearTokensList = function() {
  return this.setTokensList([]);
};


/**
 * optional string tokenizer_id = 2;
 * @return {string}
 */
proto.gooseai.Tokens.prototype.getTokenizerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.Tokens} returns this
 */
proto.gooseai.Tokens.prototype.setTokenizerId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.Tokens} returns this
 */
proto.gooseai.Tokens.prototype.clearTokenizerId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Tokens.prototype.hasTokenizerId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gooseai.Artifact.oneofGroups_ = [[5,6,7,11]];

/**
 * @enum {number}
 */
proto.gooseai.Artifact.DataCase = {
  DATA_NOT_SET: 0,
  BINARY: 5,
  TEXT: 6,
  TOKENS: 7,
  CLASSIFIER: 11
};

/**
 * @return {proto.gooseai.Artifact.DataCase}
 */
proto.gooseai.Artifact.prototype.getDataCase = function() {
  return /** @type {proto.gooseai.Artifact.DataCase} */(jspb.Message.computeOneofCase(this, proto.gooseai.Artifact.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.Artifact.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.Artifact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.Artifact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Artifact.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    magic: jspb.Message.getFieldWithDefault(msg, 4, ""),
    binary: msg.getBinary_asB64(),
    text: jspb.Message.getFieldWithDefault(msg, 6, ""),
    tokens: (f = msg.getTokens()) && proto.gooseai.Tokens.toObject(includeInstance, f),
    classifier: (f = msg.getClassifier()) && proto.gooseai.ClassifierParameters.toObject(includeInstance, f),
    index: jspb.Message.getFieldWithDefault(msg, 8, 0),
    finishReason: jspb.Message.getFieldWithDefault(msg, 9, 0),
    seed: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.Artifact}
 */
proto.gooseai.Artifact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.Artifact;
  return proto.gooseai.Artifact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.Artifact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.Artifact}
 */
proto.gooseai.Artifact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.gooseai.ArtifactType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMagic(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBinary(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 7:
      var value = new proto.gooseai.Tokens;
      reader.readMessage(value,proto.gooseai.Tokens.deserializeBinaryFromReader);
      msg.setTokens(value);
      break;
    case 11:
      var value = new proto.gooseai.ClassifierParameters;
      reader.readMessage(value,proto.gooseai.ClassifierParameters.deserializeBinaryFromReader);
      msg.setClassifier(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 9:
      var value = /** @type {!proto.gooseai.FinishReason} */ (reader.readEnum());
      msg.setFinishReason(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.Artifact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.Artifact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.Artifact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Artifact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTokens();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.gooseai.Tokens.serializeBinaryToWriter
    );
  }
  f = message.getClassifier();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.gooseai.ClassifierParameters.serializeBinaryToWriter
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getFinishReason();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.gooseai.Artifact.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.Artifact} returns this
 */
proto.gooseai.Artifact.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ArtifactType type = 2;
 * @return {!proto.gooseai.ArtifactType}
 */
proto.gooseai.Artifact.prototype.getType = function() {
  return /** @type {!proto.gooseai.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.gooseai.ArtifactType} value
 * @return {!proto.gooseai.Artifact} returns this
 */
proto.gooseai.Artifact.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string mime = 3;
 * @return {string}
 */
proto.gooseai.Artifact.prototype.getMime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.Artifact} returns this
 */
proto.gooseai.Artifact.prototype.setMime = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string magic = 4;
 * @return {string}
 */
proto.gooseai.Artifact.prototype.getMagic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.Artifact} returns this
 */
proto.gooseai.Artifact.prototype.setMagic = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.Artifact} returns this
 */
proto.gooseai.Artifact.prototype.clearMagic = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Artifact.prototype.hasMagic = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes binary = 5;
 * @return {!(string|Uint8Array)}
 */
proto.gooseai.Artifact.prototype.getBinary = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes binary = 5;
 * This is a type-conversion wrapper around `getBinary()`
 * @return {string}
 */
proto.gooseai.Artifact.prototype.getBinary_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBinary()));
};


/**
 * optional bytes binary = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBinary()`
 * @return {!Uint8Array}
 */
proto.gooseai.Artifact.prototype.getBinary_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBinary()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gooseai.Artifact} returns this
 */
proto.gooseai.Artifact.prototype.setBinary = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.gooseai.Artifact.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.Artifact} returns this
 */
proto.gooseai.Artifact.prototype.clearBinary = function() {
  return jspb.Message.setOneofField(this, 5, proto.gooseai.Artifact.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Artifact.prototype.hasBinary = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string text = 6;
 * @return {string}
 */
proto.gooseai.Artifact.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.Artifact} returns this
 */
proto.gooseai.Artifact.prototype.setText = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.gooseai.Artifact.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.Artifact} returns this
 */
proto.gooseai.Artifact.prototype.clearText = function() {
  return jspb.Message.setOneofField(this, 6, proto.gooseai.Artifact.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Artifact.prototype.hasText = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Tokens tokens = 7;
 * @return {?proto.gooseai.Tokens}
 */
proto.gooseai.Artifact.prototype.getTokens = function() {
  return /** @type{?proto.gooseai.Tokens} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.Tokens, 7));
};


/**
 * @param {?proto.gooseai.Tokens|undefined} value
 * @return {!proto.gooseai.Artifact} returns this
*/
proto.gooseai.Artifact.prototype.setTokens = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.gooseai.Artifact.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Artifact} returns this
 */
proto.gooseai.Artifact.prototype.clearTokens = function() {
  return this.setTokens(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Artifact.prototype.hasTokens = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ClassifierParameters classifier = 11;
 * @return {?proto.gooseai.ClassifierParameters}
 */
proto.gooseai.Artifact.prototype.getClassifier = function() {
  return /** @type{?proto.gooseai.ClassifierParameters} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.ClassifierParameters, 11));
};


/**
 * @param {?proto.gooseai.ClassifierParameters|undefined} value
 * @return {!proto.gooseai.Artifact} returns this
*/
proto.gooseai.Artifact.prototype.setClassifier = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.gooseai.Artifact.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Artifact} returns this
 */
proto.gooseai.Artifact.prototype.clearClassifier = function() {
  return this.setClassifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Artifact.prototype.hasClassifier = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint32 index = 8;
 * @return {number}
 */
proto.gooseai.Artifact.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.Artifact} returns this
 */
proto.gooseai.Artifact.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional FinishReason finish_reason = 9;
 * @return {!proto.gooseai.FinishReason}
 */
proto.gooseai.Artifact.prototype.getFinishReason = function() {
  return /** @type {!proto.gooseai.FinishReason} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.gooseai.FinishReason} value
 * @return {!proto.gooseai.Artifact} returns this
 */
proto.gooseai.Artifact.prototype.setFinishReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional uint32 seed = 10;
 * @return {number}
 */
proto.gooseai.Artifact.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.Artifact} returns this
 */
proto.gooseai.Artifact.prototype.setSeed = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.PromptParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.PromptParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.PromptParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.PromptParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    init: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    weight: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.PromptParameters}
 */
proto.gooseai.PromptParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.PromptParameters;
  return proto.gooseai.PromptParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.PromptParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.PromptParameters}
 */
proto.gooseai.PromptParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.PromptParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.PromptParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.PromptParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.PromptParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional bool init = 1;
 * @return {boolean}
 */
proto.gooseai.PromptParameters.prototype.getInit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gooseai.PromptParameters} returns this
 */
proto.gooseai.PromptParameters.prototype.setInit = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.PromptParameters} returns this
 */
proto.gooseai.PromptParameters.prototype.clearInit = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.PromptParameters.prototype.hasInit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float weight = 2;
 * @return {number}
 */
proto.gooseai.PromptParameters.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.PromptParameters} returns this
 */
proto.gooseai.PromptParameters.prototype.setWeight = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.PromptParameters} returns this
 */
proto.gooseai.PromptParameters.prototype.clearWeight = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.PromptParameters.prototype.hasWeight = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gooseai.Prompt.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.gooseai.Prompt.PromptCase = {
  PROMPT_NOT_SET: 0,
  TEXT: 2,
  TOKENS: 3,
  ARTIFACT: 4
};

/**
 * @return {proto.gooseai.Prompt.PromptCase}
 */
proto.gooseai.Prompt.prototype.getPromptCase = function() {
  return /** @type {proto.gooseai.Prompt.PromptCase} */(jspb.Message.computeOneofCase(this, proto.gooseai.Prompt.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.Prompt.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.Prompt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.Prompt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Prompt.toObject = function(includeInstance, msg) {
  var f, obj = {
    parameters: (f = msg.getParameters()) && proto.gooseai.PromptParameters.toObject(includeInstance, f),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tokens: (f = msg.getTokens()) && proto.gooseai.Tokens.toObject(includeInstance, f),
    artifact: (f = msg.getArtifact()) && proto.gooseai.Artifact.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.Prompt}
 */
proto.gooseai.Prompt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.Prompt;
  return proto.gooseai.Prompt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.Prompt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.Prompt}
 */
proto.gooseai.Prompt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gooseai.PromptParameters;
      reader.readMessage(value,proto.gooseai.PromptParameters.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = new proto.gooseai.Tokens;
      reader.readMessage(value,proto.gooseai.Tokens.deserializeBinaryFromReader);
      msg.setTokens(value);
      break;
    case 4:
      var value = new proto.gooseai.Artifact;
      reader.readMessage(value,proto.gooseai.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.Prompt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.Prompt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.Prompt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Prompt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gooseai.PromptParameters.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTokens();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.gooseai.Tokens.serializeBinaryToWriter
    );
  }
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.gooseai.Artifact.serializeBinaryToWriter
    );
  }
};


/**
 * optional PromptParameters parameters = 1;
 * @return {?proto.gooseai.PromptParameters}
 */
proto.gooseai.Prompt.prototype.getParameters = function() {
  return /** @type{?proto.gooseai.PromptParameters} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.PromptParameters, 1));
};


/**
 * @param {?proto.gooseai.PromptParameters|undefined} value
 * @return {!proto.gooseai.Prompt} returns this
*/
proto.gooseai.Prompt.prototype.setParameters = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Prompt} returns this
 */
proto.gooseai.Prompt.prototype.clearParameters = function() {
  return this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Prompt.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.gooseai.Prompt.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.Prompt} returns this
 */
proto.gooseai.Prompt.prototype.setText = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.gooseai.Prompt.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.Prompt} returns this
 */
proto.gooseai.Prompt.prototype.clearText = function() {
  return jspb.Message.setOneofField(this, 2, proto.gooseai.Prompt.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Prompt.prototype.hasText = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Tokens tokens = 3;
 * @return {?proto.gooseai.Tokens}
 */
proto.gooseai.Prompt.prototype.getTokens = function() {
  return /** @type{?proto.gooseai.Tokens} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.Tokens, 3));
};


/**
 * @param {?proto.gooseai.Tokens|undefined} value
 * @return {!proto.gooseai.Prompt} returns this
*/
proto.gooseai.Prompt.prototype.setTokens = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.gooseai.Prompt.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Prompt} returns this
 */
proto.gooseai.Prompt.prototype.clearTokens = function() {
  return this.setTokens(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Prompt.prototype.hasTokens = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Artifact artifact = 4;
 * @return {?proto.gooseai.Artifact}
 */
proto.gooseai.Prompt.prototype.getArtifact = function() {
  return /** @type{?proto.gooseai.Artifact} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.Artifact, 4));
};


/**
 * @param {?proto.gooseai.Artifact|undefined} value
 * @return {!proto.gooseai.Prompt} returns this
*/
proto.gooseai.Prompt.prototype.setArtifact = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.gooseai.Prompt.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Prompt} returns this
 */
proto.gooseai.Prompt.prototype.clearArtifact = function() {
  return this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Prompt.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.AnswerMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.AnswerMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.AnswerMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.AnswerMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    gpuId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cpuId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nodeId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    engineId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.AnswerMeta}
 */
proto.gooseai.AnswerMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.AnswerMeta;
  return proto.gooseai.AnswerMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.AnswerMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.AnswerMeta}
 */
proto.gooseai.AnswerMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGpuId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCpuId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEngineId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.AnswerMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.AnswerMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.AnswerMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.AnswerMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string gpu_id = 1;
 * @return {string}
 */
proto.gooseai.AnswerMeta.prototype.getGpuId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.AnswerMeta} returns this
 */
proto.gooseai.AnswerMeta.prototype.setGpuId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.AnswerMeta} returns this
 */
proto.gooseai.AnswerMeta.prototype.clearGpuId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.AnswerMeta.prototype.hasGpuId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string cpu_id = 2;
 * @return {string}
 */
proto.gooseai.AnswerMeta.prototype.getCpuId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.AnswerMeta} returns this
 */
proto.gooseai.AnswerMeta.prototype.setCpuId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.AnswerMeta} returns this
 */
proto.gooseai.AnswerMeta.prototype.clearCpuId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.AnswerMeta.prototype.hasCpuId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string node_id = 3;
 * @return {string}
 */
proto.gooseai.AnswerMeta.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.AnswerMeta} returns this
 */
proto.gooseai.AnswerMeta.prototype.setNodeId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.AnswerMeta} returns this
 */
proto.gooseai.AnswerMeta.prototype.clearNodeId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.AnswerMeta.prototype.hasNodeId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string engine_id = 4;
 * @return {string}
 */
proto.gooseai.AnswerMeta.prototype.getEngineId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.AnswerMeta} returns this
 */
proto.gooseai.AnswerMeta.prototype.setEngineId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.AnswerMeta} returns this
 */
proto.gooseai.AnswerMeta.prototype.clearEngineId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.AnswerMeta.prototype.hasEngineId = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gooseai.Answer.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.Answer.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.Answer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.Answer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Answer.toObject = function(includeInstance, msg) {
  var f, obj = {
    answerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    received: jspb.Message.getFieldWithDefault(msg, 3, 0),
    created: jspb.Message.getFieldWithDefault(msg, 4, 0),
    meta: (f = msg.getMeta()) && proto.gooseai.AnswerMeta.toObject(includeInstance, f),
    artifactsList: jspb.Message.toObjectList(msg.getArtifactsList(),
    proto.gooseai.Artifact.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.Answer}
 */
proto.gooseai.Answer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.Answer;
  return proto.gooseai.Answer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.Answer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.Answer}
 */
proto.gooseai.Answer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReceived(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreated(value);
      break;
    case 6:
      var value = new proto.gooseai.AnswerMeta;
      reader.readMessage(value,proto.gooseai.AnswerMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 7:
      var value = new proto.gooseai.Artifact;
      reader.readMessage(value,proto.gooseai.Artifact.deserializeBinaryFromReader);
      msg.addArtifacts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.Answer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.Answer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.Answer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Answer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReceived();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getCreated();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.gooseai.AnswerMeta.serializeBinaryToWriter
    );
  }
  f = message.getArtifactsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.gooseai.Artifact.serializeBinaryToWriter
    );
  }
};


/**
 * optional string answer_id = 1;
 * @return {string}
 */
proto.gooseai.Answer.prototype.getAnswerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.Answer} returns this
 */
proto.gooseai.Answer.prototype.setAnswerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string request_id = 2;
 * @return {string}
 */
proto.gooseai.Answer.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.Answer} returns this
 */
proto.gooseai.Answer.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 received = 3;
 * @return {number}
 */
proto.gooseai.Answer.prototype.getReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.Answer} returns this
 */
proto.gooseai.Answer.prototype.setReceived = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 created = 4;
 * @return {number}
 */
proto.gooseai.Answer.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.Answer} returns this
 */
proto.gooseai.Answer.prototype.setCreated = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional AnswerMeta meta = 6;
 * @return {?proto.gooseai.AnswerMeta}
 */
proto.gooseai.Answer.prototype.getMeta = function() {
  return /** @type{?proto.gooseai.AnswerMeta} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.AnswerMeta, 6));
};


/**
 * @param {?proto.gooseai.AnswerMeta|undefined} value
 * @return {!proto.gooseai.Answer} returns this
*/
proto.gooseai.Answer.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Answer} returns this
 */
proto.gooseai.Answer.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Answer.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Artifact artifacts = 7;
 * @return {!Array<!proto.gooseai.Artifact>}
 */
proto.gooseai.Answer.prototype.getArtifactsList = function() {
  return /** @type{!Array<!proto.gooseai.Artifact>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gooseai.Artifact, 7));
};


/**
 * @param {!Array<!proto.gooseai.Artifact>} value
 * @return {!proto.gooseai.Answer} returns this
*/
proto.gooseai.Answer.prototype.setArtifactsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.gooseai.Artifact=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gooseai.Artifact}
 */
proto.gooseai.Answer.prototype.addArtifacts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.gooseai.Artifact, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gooseai.Answer} returns this
 */
proto.gooseai.Answer.prototype.clearArtifactsList = function() {
  return this.setArtifactsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.SamplerParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.SamplerParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.SamplerParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.SamplerParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    eta: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    samplingSteps: jspb.Message.getFieldWithDefault(msg, 2, 0),
    latentChannels: jspb.Message.getFieldWithDefault(msg, 3, 0),
    downsamplingFactor: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cfgScale: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.SamplerParameters}
 */
proto.gooseai.SamplerParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.SamplerParameters;
  return proto.gooseai.SamplerParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.SamplerParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.SamplerParameters}
 */
proto.gooseai.SamplerParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEta(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSamplingSteps(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatentChannels(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDownsamplingFactor(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCfgScale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.SamplerParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.SamplerParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.SamplerParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.SamplerParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional float eta = 1;
 * @return {number}
 */
proto.gooseai.SamplerParameters.prototype.getEta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.SamplerParameters} returns this
 */
proto.gooseai.SamplerParameters.prototype.setEta = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.SamplerParameters} returns this
 */
proto.gooseai.SamplerParameters.prototype.clearEta = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.SamplerParameters.prototype.hasEta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 sampling_steps = 2;
 * @return {number}
 */
proto.gooseai.SamplerParameters.prototype.getSamplingSteps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.SamplerParameters} returns this
 */
proto.gooseai.SamplerParameters.prototype.setSamplingSteps = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.SamplerParameters} returns this
 */
proto.gooseai.SamplerParameters.prototype.clearSamplingSteps = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.SamplerParameters.prototype.hasSamplingSteps = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 latent_channels = 3;
 * @return {number}
 */
proto.gooseai.SamplerParameters.prototype.getLatentChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.SamplerParameters} returns this
 */
proto.gooseai.SamplerParameters.prototype.setLatentChannels = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.SamplerParameters} returns this
 */
proto.gooseai.SamplerParameters.prototype.clearLatentChannels = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.SamplerParameters.prototype.hasLatentChannels = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 downsampling_factor = 4;
 * @return {number}
 */
proto.gooseai.SamplerParameters.prototype.getDownsamplingFactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.SamplerParameters} returns this
 */
proto.gooseai.SamplerParameters.prototype.setDownsamplingFactor = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.SamplerParameters} returns this
 */
proto.gooseai.SamplerParameters.prototype.clearDownsamplingFactor = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.SamplerParameters.prototype.hasDownsamplingFactor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float cfg_scale = 5;
 * @return {number}
 */
proto.gooseai.SamplerParameters.prototype.getCfgScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.SamplerParameters} returns this
 */
proto.gooseai.SamplerParameters.prototype.setCfgScale = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.SamplerParameters} returns this
 */
proto.gooseai.SamplerParameters.prototype.clearCfgScale = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.SamplerParameters.prototype.hasCfgScale = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.ConditionerParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.ConditionerParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.ConditionerParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ConditionerParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    vectorAdjustPrior: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.ConditionerParameters}
 */
proto.gooseai.ConditionerParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.ConditionerParameters;
  return proto.gooseai.ConditionerParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.ConditionerParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.ConditionerParameters}
 */
proto.gooseai.ConditionerParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVectorAdjustPrior(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.ConditionerParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.ConditionerParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.ConditionerParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ConditionerParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string vector_adjust_prior = 1;
 * @return {string}
 */
proto.gooseai.ConditionerParameters.prototype.getVectorAdjustPrior = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.ConditionerParameters} returns this
 */
proto.gooseai.ConditionerParameters.prototype.setVectorAdjustPrior = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.ConditionerParameters} returns this
 */
proto.gooseai.ConditionerParameters.prototype.clearVectorAdjustPrior = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ConditionerParameters.prototype.hasVectorAdjustPrior = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.ScheduleParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.ScheduleParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.ScheduleParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ScheduleParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    end: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.ScheduleParameters}
 */
proto.gooseai.ScheduleParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.ScheduleParameters;
  return proto.gooseai.ScheduleParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.ScheduleParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.ScheduleParameters}
 */
proto.gooseai.ScheduleParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.ScheduleParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.ScheduleParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.ScheduleParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ScheduleParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float start = 1;
 * @return {number}
 */
proto.gooseai.ScheduleParameters.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.ScheduleParameters} returns this
 */
proto.gooseai.ScheduleParameters.prototype.setStart = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.ScheduleParameters} returns this
 */
proto.gooseai.ScheduleParameters.prototype.clearStart = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ScheduleParameters.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float end = 2;
 * @return {number}
 */
proto.gooseai.ScheduleParameters.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.ScheduleParameters} returns this
 */
proto.gooseai.ScheduleParameters.prototype.setEnd = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.ScheduleParameters} returns this
 */
proto.gooseai.ScheduleParameters.prototype.clearEnd = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ScheduleParameters.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.StepParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.StepParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.StepParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.StepParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    scaledStep: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    sampler: (f = msg.getSampler()) && proto.gooseai.SamplerParameters.toObject(includeInstance, f),
    schedule: (f = msg.getSchedule()) && proto.gooseai.ScheduleParameters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.StepParameter}
 */
proto.gooseai.StepParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.StepParameter;
  return proto.gooseai.StepParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.StepParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.StepParameter}
 */
proto.gooseai.StepParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScaledStep(value);
      break;
    case 2:
      var value = new proto.gooseai.SamplerParameters;
      reader.readMessage(value,proto.gooseai.SamplerParameters.deserializeBinaryFromReader);
      msg.setSampler(value);
      break;
    case 3:
      var value = new proto.gooseai.ScheduleParameters;
      reader.readMessage(value,proto.gooseai.ScheduleParameters.deserializeBinaryFromReader);
      msg.setSchedule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.StepParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.StepParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.StepParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.StepParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScaledStep();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getSampler();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gooseai.SamplerParameters.serializeBinaryToWriter
    );
  }
  f = message.getSchedule();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.gooseai.ScheduleParameters.serializeBinaryToWriter
    );
  }
};


/**
 * optional float scaled_step = 1;
 * @return {number}
 */
proto.gooseai.StepParameter.prototype.getScaledStep = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.StepParameter} returns this
 */
proto.gooseai.StepParameter.prototype.setScaledStep = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional SamplerParameters sampler = 2;
 * @return {?proto.gooseai.SamplerParameters}
 */
proto.gooseai.StepParameter.prototype.getSampler = function() {
  return /** @type{?proto.gooseai.SamplerParameters} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.SamplerParameters, 2));
};


/**
 * @param {?proto.gooseai.SamplerParameters|undefined} value
 * @return {!proto.gooseai.StepParameter} returns this
*/
proto.gooseai.StepParameter.prototype.setSampler = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.StepParameter} returns this
 */
proto.gooseai.StepParameter.prototype.clearSampler = function() {
  return this.setSampler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.StepParameter.prototype.hasSampler = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ScheduleParameters schedule = 3;
 * @return {?proto.gooseai.ScheduleParameters}
 */
proto.gooseai.StepParameter.prototype.getSchedule = function() {
  return /** @type{?proto.gooseai.ScheduleParameters} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.ScheduleParameters, 3));
};


/**
 * @param {?proto.gooseai.ScheduleParameters|undefined} value
 * @return {!proto.gooseai.StepParameter} returns this
*/
proto.gooseai.StepParameter.prototype.setSchedule = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.StepParameter} returns this
 */
proto.gooseai.StepParameter.prototype.clearSchedule = function() {
  return this.setSchedule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.StepParameter.prototype.hasSchedule = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gooseai.TransformType.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.gooseai.TransformType.TypeCase = {
  TYPE_NOT_SET: 0,
  DIFFUSION: 1,
  UPSCALER: 2
};

/**
 * @return {proto.gooseai.TransformType.TypeCase}
 */
proto.gooseai.TransformType.prototype.getTypeCase = function() {
  return /** @type {proto.gooseai.TransformType.TypeCase} */(jspb.Message.computeOneofCase(this, proto.gooseai.TransformType.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.TransformType.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.TransformType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.TransformType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.TransformType.toObject = function(includeInstance, msg) {
  var f, obj = {
    diffusion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    upscaler: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.TransformType}
 */
proto.gooseai.TransformType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.TransformType;
  return proto.gooseai.TransformType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.TransformType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.TransformType}
 */
proto.gooseai.TransformType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.gooseai.DiffusionSampler} */ (reader.readEnum());
      msg.setDiffusion(value);
      break;
    case 2:
      var value = /** @type {!proto.gooseai.Upscaler} */ (reader.readEnum());
      msg.setUpscaler(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.TransformType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.TransformType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.TransformType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.TransformType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.gooseai.DiffusionSampler} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.gooseai.Upscaler} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional DiffusionSampler diffusion = 1;
 * @return {!proto.gooseai.DiffusionSampler}
 */
proto.gooseai.TransformType.prototype.getDiffusion = function() {
  return /** @type {!proto.gooseai.DiffusionSampler} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.gooseai.DiffusionSampler} value
 * @return {!proto.gooseai.TransformType} returns this
 */
proto.gooseai.TransformType.prototype.setDiffusion = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.gooseai.TransformType.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.TransformType} returns this
 */
proto.gooseai.TransformType.prototype.clearDiffusion = function() {
  return jspb.Message.setOneofField(this, 1, proto.gooseai.TransformType.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.TransformType.prototype.hasDiffusion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Upscaler upscaler = 2;
 * @return {!proto.gooseai.Upscaler}
 */
proto.gooseai.TransformType.prototype.getUpscaler = function() {
  return /** @type {!proto.gooseai.Upscaler} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.gooseai.Upscaler} value
 * @return {!proto.gooseai.TransformType} returns this
 */
proto.gooseai.TransformType.prototype.setUpscaler = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.gooseai.TransformType.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.TransformType} returns this
 */
proto.gooseai.TransformType.prototype.clearUpscaler = function() {
  return jspb.Message.setOneofField(this, 2, proto.gooseai.TransformType.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.TransformType.prototype.hasUpscaler = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gooseai.ImageParameters.repeatedFields_ = [3,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.ImageParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.ImageParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.ImageParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ImageParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0),
    seedList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    samples: jspb.Message.getFieldWithDefault(msg, 4, 0),
    steps: jspb.Message.getFieldWithDefault(msg, 5, 0),
    transform: (f = msg.getTransform()) && proto.gooseai.TransformType.toObject(includeInstance, f),
    parametersList: jspb.Message.toObjectList(msg.getParametersList(),
    proto.gooseai.StepParameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.ImageParameters}
 */
proto.gooseai.ImageParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.ImageParameters;
  return proto.gooseai.ImageParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.ImageParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.ImageParameters}
 */
proto.gooseai.ImageParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWidth(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSeed(values[i]);
      }
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSamples(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSteps(value);
      break;
    case 6:
      var value = new proto.gooseai.TransformType;
      reader.readMessage(value,proto.gooseai.TransformType.deserializeBinaryFromReader);
      msg.setTransform(value);
      break;
    case 7:
      var value = new proto.gooseai.StepParameter;
      reader.readMessage(value,proto.gooseai.StepParameter.deserializeBinaryFromReader);
      msg.addParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.ImageParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.ImageParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.ImageParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ImageParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSeedList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTransform();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.gooseai.TransformType.serializeBinaryToWriter
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.gooseai.StepParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.gooseai.ImageParameters.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.ImageParameters} returns this
 */
proto.gooseai.ImageParameters.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.ImageParameters} returns this
 */
proto.gooseai.ImageParameters.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ImageParameters.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 width = 2;
 * @return {number}
 */
proto.gooseai.ImageParameters.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.ImageParameters} returns this
 */
proto.gooseai.ImageParameters.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.ImageParameters} returns this
 */
proto.gooseai.ImageParameters.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ImageParameters.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated uint32 seed = 3;
 * @return {!Array<number>}
 */
proto.gooseai.ImageParameters.prototype.getSeedList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.gooseai.ImageParameters} returns this
 */
proto.gooseai.ImageParameters.prototype.setSeedList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.gooseai.ImageParameters} returns this
 */
proto.gooseai.ImageParameters.prototype.addSeed = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gooseai.ImageParameters} returns this
 */
proto.gooseai.ImageParameters.prototype.clearSeedList = function() {
  return this.setSeedList([]);
};


/**
 * optional uint64 samples = 4;
 * @return {number}
 */
proto.gooseai.ImageParameters.prototype.getSamples = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.ImageParameters} returns this
 */
proto.gooseai.ImageParameters.prototype.setSamples = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.ImageParameters} returns this
 */
proto.gooseai.ImageParameters.prototype.clearSamples = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ImageParameters.prototype.hasSamples = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 steps = 5;
 * @return {number}
 */
proto.gooseai.ImageParameters.prototype.getSteps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.ImageParameters} returns this
 */
proto.gooseai.ImageParameters.prototype.setSteps = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.ImageParameters} returns this
 */
proto.gooseai.ImageParameters.prototype.clearSteps = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ImageParameters.prototype.hasSteps = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TransformType transform = 6;
 * @return {?proto.gooseai.TransformType}
 */
proto.gooseai.ImageParameters.prototype.getTransform = function() {
  return /** @type{?proto.gooseai.TransformType} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.TransformType, 6));
};


/**
 * @param {?proto.gooseai.TransformType|undefined} value
 * @return {!proto.gooseai.ImageParameters} returns this
*/
proto.gooseai.ImageParameters.prototype.setTransform = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.ImageParameters} returns this
 */
proto.gooseai.ImageParameters.prototype.clearTransform = function() {
  return this.setTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ImageParameters.prototype.hasTransform = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated StepParameter parameters = 7;
 * @return {!Array<!proto.gooseai.StepParameter>}
 */
proto.gooseai.ImageParameters.prototype.getParametersList = function() {
  return /** @type{!Array<!proto.gooseai.StepParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gooseai.StepParameter, 7));
};


/**
 * @param {!Array<!proto.gooseai.StepParameter>} value
 * @return {!proto.gooseai.ImageParameters} returns this
*/
proto.gooseai.ImageParameters.prototype.setParametersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.gooseai.StepParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gooseai.StepParameter}
 */
proto.gooseai.ImageParameters.prototype.addParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.gooseai.StepParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gooseai.ImageParameters} returns this
 */
proto.gooseai.ImageParameters.prototype.clearParametersList = function() {
  return this.setParametersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.ClassifierConcept.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.ClassifierConcept.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.ClassifierConcept} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ClassifierConcept.toObject = function(includeInstance, msg) {
  var f, obj = {
    concept: jspb.Message.getFieldWithDefault(msg, 1, ""),
    threshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.ClassifierConcept}
 */
proto.gooseai.ClassifierConcept.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.ClassifierConcept;
  return proto.gooseai.ClassifierConcept.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.ClassifierConcept} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.ClassifierConcept}
 */
proto.gooseai.ClassifierConcept.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConcept(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.ClassifierConcept.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.ClassifierConcept.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.ClassifierConcept} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ClassifierConcept.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConcept();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string concept = 1;
 * @return {string}
 */
proto.gooseai.ClassifierConcept.prototype.getConcept = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.ClassifierConcept} returns this
 */
proto.gooseai.ClassifierConcept.prototype.setConcept = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float threshold = 2;
 * @return {number}
 */
proto.gooseai.ClassifierConcept.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.ClassifierConcept} returns this
 */
proto.gooseai.ClassifierConcept.prototype.setThreshold = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.ClassifierConcept} returns this
 */
proto.gooseai.ClassifierConcept.prototype.clearThreshold = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ClassifierConcept.prototype.hasThreshold = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gooseai.ClassifierCategory.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.ClassifierCategory.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.ClassifierCategory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.ClassifierCategory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ClassifierCategory.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    conceptsList: jspb.Message.toObjectList(msg.getConceptsList(),
    proto.gooseai.ClassifierConcept.toObject, includeInstance),
    adjustment: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    action: jspb.Message.getFieldWithDefault(msg, 4, 0),
    classifierMode: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.ClassifierCategory}
 */
proto.gooseai.ClassifierCategory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.ClassifierCategory;
  return proto.gooseai.ClassifierCategory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.ClassifierCategory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.ClassifierCategory}
 */
proto.gooseai.ClassifierCategory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.gooseai.ClassifierConcept;
      reader.readMessage(value,proto.gooseai.ClassifierConcept.deserializeBinaryFromReader);
      msg.addConcepts(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAdjustment(value);
      break;
    case 4:
      var value = /** @type {!proto.gooseai.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 5:
      var value = /** @type {!proto.gooseai.ClassifierMode} */ (reader.readEnum());
      msg.setClassifierMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.ClassifierCategory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.ClassifierCategory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.ClassifierCategory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ClassifierCategory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConceptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.gooseai.ClassifierConcept.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {!proto.gooseai.Action} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!proto.gooseai.ClassifierMode} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.gooseai.ClassifierCategory.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.ClassifierCategory} returns this
 */
proto.gooseai.ClassifierCategory.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ClassifierConcept concepts = 2;
 * @return {!Array<!proto.gooseai.ClassifierConcept>}
 */
proto.gooseai.ClassifierCategory.prototype.getConceptsList = function() {
  return /** @type{!Array<!proto.gooseai.ClassifierConcept>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gooseai.ClassifierConcept, 2));
};


/**
 * @param {!Array<!proto.gooseai.ClassifierConcept>} value
 * @return {!proto.gooseai.ClassifierCategory} returns this
*/
proto.gooseai.ClassifierCategory.prototype.setConceptsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.gooseai.ClassifierConcept=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gooseai.ClassifierConcept}
 */
proto.gooseai.ClassifierCategory.prototype.addConcepts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.gooseai.ClassifierConcept, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gooseai.ClassifierCategory} returns this
 */
proto.gooseai.ClassifierCategory.prototype.clearConceptsList = function() {
  return this.setConceptsList([]);
};


/**
 * optional float adjustment = 3;
 * @return {number}
 */
proto.gooseai.ClassifierCategory.prototype.getAdjustment = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.ClassifierCategory} returns this
 */
proto.gooseai.ClassifierCategory.prototype.setAdjustment = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.ClassifierCategory} returns this
 */
proto.gooseai.ClassifierCategory.prototype.clearAdjustment = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ClassifierCategory.prototype.hasAdjustment = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Action action = 4;
 * @return {!proto.gooseai.Action}
 */
proto.gooseai.ClassifierCategory.prototype.getAction = function() {
  return /** @type {!proto.gooseai.Action} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.gooseai.Action} value
 * @return {!proto.gooseai.ClassifierCategory} returns this
 */
proto.gooseai.ClassifierCategory.prototype.setAction = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.ClassifierCategory} returns this
 */
proto.gooseai.ClassifierCategory.prototype.clearAction = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ClassifierCategory.prototype.hasAction = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ClassifierMode classifier_mode = 5;
 * @return {!proto.gooseai.ClassifierMode}
 */
proto.gooseai.ClassifierCategory.prototype.getClassifierMode = function() {
  return /** @type {!proto.gooseai.ClassifierMode} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.gooseai.ClassifierMode} value
 * @return {!proto.gooseai.ClassifierCategory} returns this
 */
proto.gooseai.ClassifierCategory.prototype.setClassifierMode = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.ClassifierCategory} returns this
 */
proto.gooseai.ClassifierCategory.prototype.clearClassifierMode = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ClassifierCategory.prototype.hasClassifierMode = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gooseai.ClassifierParameters.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.ClassifierParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.ClassifierParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.ClassifierParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ClassifierParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    categoriesList: jspb.Message.toObjectList(msg.getCategoriesList(),
    proto.gooseai.ClassifierCategory.toObject, includeInstance),
    exceedsList: jspb.Message.toObjectList(msg.getExceedsList(),
    proto.gooseai.ClassifierCategory.toObject, includeInstance),
    realizedAction: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.ClassifierParameters}
 */
proto.gooseai.ClassifierParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.ClassifierParameters;
  return proto.gooseai.ClassifierParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.ClassifierParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.ClassifierParameters}
 */
proto.gooseai.ClassifierParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gooseai.ClassifierCategory;
      reader.readMessage(value,proto.gooseai.ClassifierCategory.deserializeBinaryFromReader);
      msg.addCategories(value);
      break;
    case 2:
      var value = new proto.gooseai.ClassifierCategory;
      reader.readMessage(value,proto.gooseai.ClassifierCategory.deserializeBinaryFromReader);
      msg.addExceeds(value);
      break;
    case 3:
      var value = /** @type {!proto.gooseai.Action} */ (reader.readEnum());
      msg.setRealizedAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.ClassifierParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.ClassifierParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.ClassifierParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ClassifierParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCategoriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.gooseai.ClassifierCategory.serializeBinaryToWriter
    );
  }
  f = message.getExceedsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.gooseai.ClassifierCategory.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.gooseai.Action} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated ClassifierCategory categories = 1;
 * @return {!Array<!proto.gooseai.ClassifierCategory>}
 */
proto.gooseai.ClassifierParameters.prototype.getCategoriesList = function() {
  return /** @type{!Array<!proto.gooseai.ClassifierCategory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gooseai.ClassifierCategory, 1));
};


/**
 * @param {!Array<!proto.gooseai.ClassifierCategory>} value
 * @return {!proto.gooseai.ClassifierParameters} returns this
*/
proto.gooseai.ClassifierParameters.prototype.setCategoriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gooseai.ClassifierCategory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gooseai.ClassifierCategory}
 */
proto.gooseai.ClassifierParameters.prototype.addCategories = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gooseai.ClassifierCategory, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gooseai.ClassifierParameters} returns this
 */
proto.gooseai.ClassifierParameters.prototype.clearCategoriesList = function() {
  return this.setCategoriesList([]);
};


/**
 * repeated ClassifierCategory exceeds = 2;
 * @return {!Array<!proto.gooseai.ClassifierCategory>}
 */
proto.gooseai.ClassifierParameters.prototype.getExceedsList = function() {
  return /** @type{!Array<!proto.gooseai.ClassifierCategory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gooseai.ClassifierCategory, 2));
};


/**
 * @param {!Array<!proto.gooseai.ClassifierCategory>} value
 * @return {!proto.gooseai.ClassifierParameters} returns this
*/
proto.gooseai.ClassifierParameters.prototype.setExceedsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.gooseai.ClassifierCategory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gooseai.ClassifierCategory}
 */
proto.gooseai.ClassifierParameters.prototype.addExceeds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.gooseai.ClassifierCategory, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gooseai.ClassifierParameters} returns this
 */
proto.gooseai.ClassifierParameters.prototype.clearExceedsList = function() {
  return this.setExceedsList([]);
};


/**
 * optional Action realized_action = 3;
 * @return {!proto.gooseai.Action}
 */
proto.gooseai.ClassifierParameters.prototype.getRealizedAction = function() {
  return /** @type {!proto.gooseai.Action} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.gooseai.Action} value
 * @return {!proto.gooseai.ClassifierParameters} returns this
 */
proto.gooseai.ClassifierParameters.prototype.setRealizedAction = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.ClassifierParameters} returns this
 */
proto.gooseai.ClassifierParameters.prototype.clearRealizedAction = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ClassifierParameters.prototype.hasRealizedAction = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.AssetParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.AssetParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.AssetParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.AssetParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    project: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.AssetParameters}
 */
proto.gooseai.AssetParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.AssetParameters;
  return proto.gooseai.AssetParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.AssetParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.AssetParameters}
 */
proto.gooseai.AssetParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.gooseai.AssetAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.AssetParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.AssetParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.AssetParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.AssetParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional AssetAction action = 1;
 * @return {!proto.gooseai.AssetAction}
 */
proto.gooseai.AssetParameters.prototype.getAction = function() {
  return /** @type {!proto.gooseai.AssetAction} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.gooseai.AssetAction} value
 * @return {!proto.gooseai.AssetParameters} returns this
 */
proto.gooseai.AssetParameters.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.gooseai.AssetParameters.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.AssetParameters} returns this
 */
proto.gooseai.AssetParameters.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gooseai.Request.repeatedFields_ = [4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gooseai.Request.oneofGroups_ = [[5,7,8]];

/**
 * @enum {number}
 */
proto.gooseai.Request.ParamsCase = {
  PARAMS_NOT_SET: 0,
  IMAGE: 5,
  CLASSIFIER: 7,
  ASSET: 8
};

/**
 * @return {proto.gooseai.Request.ParamsCase}
 */
proto.gooseai.Request.prototype.getParamsCase = function() {
  return /** @type {proto.gooseai.Request.ParamsCase} */(jspb.Message.computeOneofCase(this, proto.gooseai.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    engineId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requestedType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    promptList: jspb.Message.toObjectList(msg.getPromptList(),
    proto.gooseai.Prompt.toObject, includeInstance),
    image: (f = msg.getImage()) && proto.gooseai.ImageParameters.toObject(includeInstance, f),
    classifier: (f = msg.getClassifier()) && proto.gooseai.ClassifierParameters.toObject(includeInstance, f),
    asset: (f = msg.getAsset()) && proto.gooseai.AssetParameters.toObject(includeInstance, f),
    conditioner: (f = msg.getConditioner()) && proto.gooseai.ConditionerParameters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.Request}
 */
proto.gooseai.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.Request;
  return proto.gooseai.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.Request}
 */
proto.gooseai.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEngineId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 3:
      var value = /** @type {!proto.gooseai.ArtifactType} */ (reader.readEnum());
      msg.setRequestedType(value);
      break;
    case 4:
      var value = new proto.gooseai.Prompt;
      reader.readMessage(value,proto.gooseai.Prompt.deserializeBinaryFromReader);
      msg.addPrompt(value);
      break;
    case 5:
      var value = new proto.gooseai.ImageParameters;
      reader.readMessage(value,proto.gooseai.ImageParameters.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 7:
      var value = new proto.gooseai.ClassifierParameters;
      reader.readMessage(value,proto.gooseai.ClassifierParameters.deserializeBinaryFromReader);
      msg.setClassifier(value);
      break;
    case 8:
      var value = new proto.gooseai.AssetParameters;
      reader.readMessage(value,proto.gooseai.AssetParameters.deserializeBinaryFromReader);
      msg.setAsset(value);
      break;
    case 6:
      var value = new proto.gooseai.ConditionerParameters;
      reader.readMessage(value,proto.gooseai.ConditionerParameters.deserializeBinaryFromReader);
      msg.setConditioner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEngineId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestedType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPromptList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.gooseai.Prompt.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.gooseai.ImageParameters.serializeBinaryToWriter
    );
  }
  f = message.getClassifier();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.gooseai.ClassifierParameters.serializeBinaryToWriter
    );
  }
  f = message.getAsset();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.gooseai.AssetParameters.serializeBinaryToWriter
    );
  }
  f = message.getConditioner();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.gooseai.ConditionerParameters.serializeBinaryToWriter
    );
  }
};


/**
 * optional string engine_id = 1;
 * @return {string}
 */
proto.gooseai.Request.prototype.getEngineId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.Request} returns this
 */
proto.gooseai.Request.prototype.setEngineId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string request_id = 2;
 * @return {string}
 */
proto.gooseai.Request.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.Request} returns this
 */
proto.gooseai.Request.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ArtifactType requested_type = 3;
 * @return {!proto.gooseai.ArtifactType}
 */
proto.gooseai.Request.prototype.getRequestedType = function() {
  return /** @type {!proto.gooseai.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.gooseai.ArtifactType} value
 * @return {!proto.gooseai.Request} returns this
 */
proto.gooseai.Request.prototype.setRequestedType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Prompt prompt = 4;
 * @return {!Array<!proto.gooseai.Prompt>}
 */
proto.gooseai.Request.prototype.getPromptList = function() {
  return /** @type{!Array<!proto.gooseai.Prompt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gooseai.Prompt, 4));
};


/**
 * @param {!Array<!proto.gooseai.Prompt>} value
 * @return {!proto.gooseai.Request} returns this
*/
proto.gooseai.Request.prototype.setPromptList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.gooseai.Prompt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gooseai.Prompt}
 */
proto.gooseai.Request.prototype.addPrompt = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.gooseai.Prompt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gooseai.Request} returns this
 */
proto.gooseai.Request.prototype.clearPromptList = function() {
  return this.setPromptList([]);
};


/**
 * optional ImageParameters image = 5;
 * @return {?proto.gooseai.ImageParameters}
 */
proto.gooseai.Request.prototype.getImage = function() {
  return /** @type{?proto.gooseai.ImageParameters} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.ImageParameters, 5));
};


/**
 * @param {?proto.gooseai.ImageParameters|undefined} value
 * @return {!proto.gooseai.Request} returns this
*/
proto.gooseai.Request.prototype.setImage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.gooseai.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Request} returns this
 */
proto.gooseai.Request.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Request.prototype.hasImage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ClassifierParameters classifier = 7;
 * @return {?proto.gooseai.ClassifierParameters}
 */
proto.gooseai.Request.prototype.getClassifier = function() {
  return /** @type{?proto.gooseai.ClassifierParameters} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.ClassifierParameters, 7));
};


/**
 * @param {?proto.gooseai.ClassifierParameters|undefined} value
 * @return {!proto.gooseai.Request} returns this
*/
proto.gooseai.Request.prototype.setClassifier = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.gooseai.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Request} returns this
 */
proto.gooseai.Request.prototype.clearClassifier = function() {
  return this.setClassifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Request.prototype.hasClassifier = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional AssetParameters asset = 8;
 * @return {?proto.gooseai.AssetParameters}
 */
proto.gooseai.Request.prototype.getAsset = function() {
  return /** @type{?proto.gooseai.AssetParameters} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.AssetParameters, 8));
};


/**
 * @param {?proto.gooseai.AssetParameters|undefined} value
 * @return {!proto.gooseai.Request} returns this
*/
proto.gooseai.Request.prototype.setAsset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.gooseai.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Request} returns this
 */
proto.gooseai.Request.prototype.clearAsset = function() {
  return this.setAsset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Request.prototype.hasAsset = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ConditionerParameters conditioner = 6;
 * @return {?proto.gooseai.ConditionerParameters}
 */
proto.gooseai.Request.prototype.getConditioner = function() {
  return /** @type{?proto.gooseai.ConditionerParameters} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.ConditionerParameters, 6));
};


/**
 * @param {?proto.gooseai.ConditionerParameters|undefined} value
 * @return {!proto.gooseai.Request} returns this
*/
proto.gooseai.Request.prototype.setConditioner = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Request} returns this
 */
proto.gooseai.Request.prototype.clearConditioner = function() {
  return this.setConditioner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Request.prototype.hasConditioner = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gooseai.OnStatus.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.OnStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.OnStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.OnStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.OnStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    reasonList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    target: jspb.Message.getFieldWithDefault(msg, 2, ""),
    actionList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.OnStatus}
 */
proto.gooseai.OnStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.OnStatus;
  return proto.gooseai.OnStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.OnStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.OnStatus}
 */
proto.gooseai.OnStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.gooseai.FinishReason>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addReason(values[i]);
      }
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 3:
      var values = /** @type {!Array<!proto.gooseai.StageAction>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAction(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.OnStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.OnStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.OnStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.OnStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReasonList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getActionList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
};


/**
 * repeated FinishReason reason = 1;
 * @return {!Array<!proto.gooseai.FinishReason>}
 */
proto.gooseai.OnStatus.prototype.getReasonList = function() {
  return /** @type {!Array<!proto.gooseai.FinishReason>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.gooseai.FinishReason>} value
 * @return {!proto.gooseai.OnStatus} returns this
 */
proto.gooseai.OnStatus.prototype.setReasonList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.gooseai.FinishReason} value
 * @param {number=} opt_index
 * @return {!proto.gooseai.OnStatus} returns this
 */
proto.gooseai.OnStatus.prototype.addReason = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gooseai.OnStatus} returns this
 */
proto.gooseai.OnStatus.prototype.clearReasonList = function() {
  return this.setReasonList([]);
};


/**
 * optional string target = 2;
 * @return {string}
 */
proto.gooseai.OnStatus.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.OnStatus} returns this
 */
proto.gooseai.OnStatus.prototype.setTarget = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.OnStatus} returns this
 */
proto.gooseai.OnStatus.prototype.clearTarget = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.OnStatus.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated StageAction action = 3;
 * @return {!Array<!proto.gooseai.StageAction>}
 */
proto.gooseai.OnStatus.prototype.getActionList = function() {
  return /** @type {!Array<!proto.gooseai.StageAction>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.gooseai.StageAction>} value
 * @return {!proto.gooseai.OnStatus} returns this
 */
proto.gooseai.OnStatus.prototype.setActionList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.gooseai.StageAction} value
 * @param {number=} opt_index
 * @return {!proto.gooseai.OnStatus} returns this
 */
proto.gooseai.OnStatus.prototype.addAction = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gooseai.OnStatus} returns this
 */
proto.gooseai.OnStatus.prototype.clearActionList = function() {
  return this.setActionList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gooseai.Stage.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.Stage.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.Stage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.Stage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Stage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    request: (f = msg.getRequest()) && proto.gooseai.Request.toObject(includeInstance, f),
    onStatusList: jspb.Message.toObjectList(msg.getOnStatusList(),
    proto.gooseai.OnStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.Stage}
 */
proto.gooseai.Stage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.Stage;
  return proto.gooseai.Stage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.Stage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.Stage}
 */
proto.gooseai.Stage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.gooseai.Request;
      reader.readMessage(value,proto.gooseai.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 3:
      var value = new proto.gooseai.OnStatus;
      reader.readMessage(value,proto.gooseai.OnStatus.deserializeBinaryFromReader);
      msg.addOnStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.Stage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.Stage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.Stage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Stage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gooseai.Request.serializeBinaryToWriter
    );
  }
  f = message.getOnStatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.gooseai.OnStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.gooseai.Stage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.Stage} returns this
 */
proto.gooseai.Stage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Request request = 2;
 * @return {?proto.gooseai.Request}
 */
proto.gooseai.Stage.prototype.getRequest = function() {
  return /** @type{?proto.gooseai.Request} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.Request, 2));
};


/**
 * @param {?proto.gooseai.Request|undefined} value
 * @return {!proto.gooseai.Stage} returns this
*/
proto.gooseai.Stage.prototype.setRequest = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Stage} returns this
 */
proto.gooseai.Stage.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Stage.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated OnStatus on_status = 3;
 * @return {!Array<!proto.gooseai.OnStatus>}
 */
proto.gooseai.Stage.prototype.getOnStatusList = function() {
  return /** @type{!Array<!proto.gooseai.OnStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gooseai.OnStatus, 3));
};


/**
 * @param {!Array<!proto.gooseai.OnStatus>} value
 * @return {!proto.gooseai.Stage} returns this
*/
proto.gooseai.Stage.prototype.setOnStatusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.gooseai.OnStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gooseai.OnStatus}
 */
proto.gooseai.Stage.prototype.addOnStatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.gooseai.OnStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gooseai.Stage} returns this
 */
proto.gooseai.Stage.prototype.clearOnStatusList = function() {
  return this.setOnStatusList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gooseai.ChainRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.ChainRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.ChainRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.ChainRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ChainRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stageList: jspb.Message.toObjectList(msg.getStageList(),
    proto.gooseai.Stage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.ChainRequest}
 */
proto.gooseai.ChainRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.ChainRequest;
  return proto.gooseai.ChainRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.ChainRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.ChainRequest}
 */
proto.gooseai.ChainRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.gooseai.Stage;
      reader.readMessage(value,proto.gooseai.Stage.deserializeBinaryFromReader);
      msg.addStage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.ChainRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.ChainRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.ChainRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ChainRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.gooseai.Stage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.gooseai.ChainRequest.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.ChainRequest} returns this
 */
proto.gooseai.ChainRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Stage stage = 2;
 * @return {!Array<!proto.gooseai.Stage>}
 */
proto.gooseai.ChainRequest.prototype.getStageList = function() {
  return /** @type{!Array<!proto.gooseai.Stage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gooseai.Stage, 2));
};


/**
 * @param {!Array<!proto.gooseai.Stage>} value
 * @return {!proto.gooseai.ChainRequest} returns this
*/
proto.gooseai.ChainRequest.prototype.setStageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.gooseai.Stage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gooseai.Stage}
 */
proto.gooseai.ChainRequest.prototype.addStage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.gooseai.Stage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gooseai.ChainRequest} returns this
 */
proto.gooseai.ChainRequest.prototype.clearStageList = function() {
  return this.setStageList([]);
};


/**
 * @enum {number}
 */
proto.gooseai.FinishReason = {
  NULL: 0,
  LENGTH: 1,
  STOP: 2,
  ERROR: 3,
  FILTER: 4
};

/**
 * @enum {number}
 */
proto.gooseai.ArtifactType = {
  ARTIFACT_NONE: 0,
  ARTIFACT_IMAGE: 1,
  ARTIFACT_VIDEO: 2,
  ARTIFACT_TEXT: 3,
  ARTIFACT_TOKENS: 4,
  ARTIFACT_EMBEDDING: 5,
  ARTIFACT_CLASSIFICATIONS: 6,
  ARTIFACT_MASK: 7
};

/**
 * @enum {number}
 */
proto.gooseai.DiffusionSampler = {
  SAMPLER_DDIM: 0,
  SAMPLER_DDPM: 1,
  SAMPLER_K_EULER: 2,
  SAMPLER_K_EULER_ANCESTRAL: 3,
  SAMPLER_K_HEUN: 4,
  SAMPLER_K_DPM_2: 5,
  SAMPLER_K_DPM_2_ANCESTRAL: 6,
  SAMPLER_K_LMS: 7
};

/**
 * @enum {number}
 */
proto.gooseai.Upscaler = {
  UPSCALER_RGB: 0,
  UPSCALER_GFPGAN: 1,
  UPSCALER_ESRGAN: 2
};

/**
 * @enum {number}
 */
proto.gooseai.Action = {
  ACTION_PASSTHROUGH: 0,
  ACTION_REGENERATE_DUPLICATE: 1,
  ACTION_REGENERATE: 2,
  ACTION_OBFUSCATE_DUPLICATE: 3,
  ACTION_OBFUSCATE: 4,
  ACTION_DISCARD: 5
};

/**
 * @enum {number}
 */
proto.gooseai.ClassifierMode = {
  CLSFR_MODE_ZEROSHOT: 0,
  CLSFR_MODE_MULTICLASS: 1
};

/**
 * @enum {number}
 */
proto.gooseai.AssetAction = {
  ASSET_PUT: 0,
  ASSET_GET: 1,
  ASSET_DELETE: 2
};

/**
 * @enum {number}
 */
proto.gooseai.StageAction = {
  STAGE_ACTION_PASS: 0,
  STAGE_ACTION_DISCARD: 1,
  STAGE_ACTION_RETURN: 2
};

goog.object.extend(exports, proto.gooseai);
